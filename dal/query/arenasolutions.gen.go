// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/shuyangzhang/shiori/dal/model"
)

func newArenaSolutions(db *gorm.DB) arenaSolutions {
	_arenaSolutions := arenaSolutions{}

	_arenaSolutions.arenaSolutionsDo.UseDB(db)
	_arenaSolutions.arenaSolutionsDo.UseModel(&model.ArenaSolutions{})

	tableName := _arenaSolutions.arenaSolutionsDo.TableName()
	_arenaSolutions.ALL = field.NewField(tableName, "*")
	_arenaSolutions.ID = field.NewInt32(tableName, "id")
	_arenaSolutions.DefenderID = field.NewInt32(tableName, "defender_id")
	_arenaSolutions.AttackerID = field.NewInt32(tableName, "attacker_id")
	_arenaSolutions.IsRandom = field.NewBool(tableName, "is_random")
	_arenaSolutions.Comment = field.NewString(tableName, "comment")
	_arenaSolutions.IsOutdated = field.NewBool(tableName, "is_outdated")
	_arenaSolutions.UpdatedTime = field.NewTime(tableName, "updated_time")
	_arenaSolutions.IsDeleted = field.NewBool(tableName, "is_deleted")

	_arenaSolutions.fillFieldMap()

	return _arenaSolutions
}

type arenaSolutions struct {
	arenaSolutionsDo

	ALL         field.Field
	ID          field.Int32
	DefenderID  field.Int32
	AttackerID  field.Int32
	IsRandom    field.Bool
	Comment     field.String
	IsOutdated  field.Bool
	UpdatedTime field.Time
	IsDeleted   field.Bool

	fieldMap map[string]field.Expr
}

func (a arenaSolutions) Table(newTableName string) *arenaSolutions {
	a.arenaSolutionsDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a arenaSolutions) As(alias string) *arenaSolutions {
	a.arenaSolutionsDo.DO = *(a.arenaSolutionsDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *arenaSolutions) updateTableName(table string) *arenaSolutions {
	a.ALL = field.NewField(table, "*")
	a.ID = field.NewInt32(table, "id")
	a.DefenderID = field.NewInt32(table, "defender_id")
	a.AttackerID = field.NewInt32(table, "attacker_id")
	a.IsRandom = field.NewBool(table, "is_random")
	a.Comment = field.NewString(table, "comment")
	a.IsOutdated = field.NewBool(table, "is_outdated")
	a.UpdatedTime = field.NewTime(table, "updated_time")
	a.IsDeleted = field.NewBool(table, "is_deleted")

	a.fillFieldMap()

	return a
}

func (a *arenaSolutions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *arenaSolutions) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["defender_id"] = a.DefenderID
	a.fieldMap["attacker_id"] = a.AttackerID
	a.fieldMap["is_random"] = a.IsRandom
	a.fieldMap["comment"] = a.Comment
	a.fieldMap["is_outdated"] = a.IsOutdated
	a.fieldMap["updated_time"] = a.UpdatedTime
	a.fieldMap["is_deleted"] = a.IsDeleted
}

func (a arenaSolutions) clone(db *gorm.DB) arenaSolutions {
	a.arenaSolutionsDo.ReplaceDB(db)
	return a
}

type arenaSolutionsDo struct{ gen.DO }

func (a arenaSolutionsDo) Debug() *arenaSolutionsDo {
	return a.withDO(a.DO.Debug())
}

func (a arenaSolutionsDo) WithContext(ctx context.Context) *arenaSolutionsDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a arenaSolutionsDo) ReadDB() *arenaSolutionsDo {
	return a.Clauses(dbresolver.Read)
}

func (a arenaSolutionsDo) WriteDB() *arenaSolutionsDo {
	return a.Clauses(dbresolver.Write)
}

func (a arenaSolutionsDo) Clauses(conds ...clause.Expression) *arenaSolutionsDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a arenaSolutionsDo) Returning(value interface{}, columns ...string) *arenaSolutionsDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a arenaSolutionsDo) Not(conds ...gen.Condition) *arenaSolutionsDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a arenaSolutionsDo) Or(conds ...gen.Condition) *arenaSolutionsDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a arenaSolutionsDo) Select(conds ...field.Expr) *arenaSolutionsDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a arenaSolutionsDo) Where(conds ...gen.Condition) *arenaSolutionsDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a arenaSolutionsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *arenaSolutionsDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a arenaSolutionsDo) Order(conds ...field.Expr) *arenaSolutionsDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a arenaSolutionsDo) Distinct(cols ...field.Expr) *arenaSolutionsDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a arenaSolutionsDo) Omit(cols ...field.Expr) *arenaSolutionsDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a arenaSolutionsDo) Join(table schema.Tabler, on ...field.Expr) *arenaSolutionsDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a arenaSolutionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *arenaSolutionsDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a arenaSolutionsDo) RightJoin(table schema.Tabler, on ...field.Expr) *arenaSolutionsDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a arenaSolutionsDo) Group(cols ...field.Expr) *arenaSolutionsDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a arenaSolutionsDo) Having(conds ...gen.Condition) *arenaSolutionsDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a arenaSolutionsDo) Limit(limit int) *arenaSolutionsDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a arenaSolutionsDo) Offset(offset int) *arenaSolutionsDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a arenaSolutionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *arenaSolutionsDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a arenaSolutionsDo) Unscoped() *arenaSolutionsDo {
	return a.withDO(a.DO.Unscoped())
}

func (a arenaSolutionsDo) Create(values ...*model.ArenaSolutions) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a arenaSolutionsDo) CreateInBatches(values []*model.ArenaSolutions, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a arenaSolutionsDo) Save(values ...*model.ArenaSolutions) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a arenaSolutionsDo) First() (*model.ArenaSolutions, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArenaSolutions), nil
	}
}

func (a arenaSolutionsDo) Take() (*model.ArenaSolutions, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArenaSolutions), nil
	}
}

func (a arenaSolutionsDo) Last() (*model.ArenaSolutions, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArenaSolutions), nil
	}
}

func (a arenaSolutionsDo) Find() ([]*model.ArenaSolutions, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArenaSolutions), err
}

func (a arenaSolutionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArenaSolutions, err error) {
	buf := make([]*model.ArenaSolutions, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a arenaSolutionsDo) FindInBatches(result *[]*model.ArenaSolutions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a arenaSolutionsDo) Attrs(attrs ...field.AssignExpr) *arenaSolutionsDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a arenaSolutionsDo) Assign(attrs ...field.AssignExpr) *arenaSolutionsDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a arenaSolutionsDo) Joins(fields ...field.RelationField) *arenaSolutionsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a arenaSolutionsDo) Preload(fields ...field.RelationField) *arenaSolutionsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a arenaSolutionsDo) FirstOrInit() (*model.ArenaSolutions, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArenaSolutions), nil
	}
}

func (a arenaSolutionsDo) FirstOrCreate() (*model.ArenaSolutions, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArenaSolutions), nil
	}
}

func (a arenaSolutionsDo) FindByPage(offset int, limit int) (result []*model.ArenaSolutions, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a arenaSolutionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a arenaSolutionsDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a *arenaSolutionsDo) withDO(do gen.Dao) *arenaSolutionsDo {
	a.DO = *do.(*gen.DO)
	return a
}
