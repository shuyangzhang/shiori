// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/shuyangzhang/shiori/dal/model"
)

func newCharactersParties(db *gorm.DB) charactersParties {
	_charactersParties := charactersParties{}

	_charactersParties.charactersPartiesDo.UseDB(db)
	_charactersParties.charactersPartiesDo.UseModel(&model.CharactersParties{})

	tableName := _charactersParties.charactersPartiesDo.TableName()
	_charactersParties.ALL = field.NewField(tableName, "*")
	_charactersParties.ID = field.NewInt32(tableName, "id")
	_charactersParties.Characters = field.NewString(tableName, "characters")
	_charactersParties.IsDeleted = field.NewBool(tableName, "is_deleted")

	_charactersParties.fillFieldMap()

	return _charactersParties
}

type charactersParties struct {
	charactersPartiesDo

	ALL        field.Field
	ID         field.Int32
	Characters field.String
	IsDeleted  field.Bool

	fieldMap map[string]field.Expr
}

func (c charactersParties) Table(newTableName string) *charactersParties {
	c.charactersPartiesDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c charactersParties) As(alias string) *charactersParties {
	c.charactersPartiesDo.DO = *(c.charactersPartiesDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *charactersParties) updateTableName(table string) *charactersParties {
	c.ALL = field.NewField(table, "*")
	c.ID = field.NewInt32(table, "id")
	c.Characters = field.NewString(table, "characters")
	c.IsDeleted = field.NewBool(table, "is_deleted")

	c.fillFieldMap()

	return c
}

func (c *charactersParties) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *charactersParties) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["id"] = c.ID
	c.fieldMap["characters"] = c.Characters
	c.fieldMap["is_deleted"] = c.IsDeleted
}

func (c charactersParties) clone(db *gorm.DB) charactersParties {
	c.charactersPartiesDo.ReplaceDB(db)
	return c
}

type charactersPartiesDo struct{ gen.DO }

func (c charactersPartiesDo) Debug() *charactersPartiesDo {
	return c.withDO(c.DO.Debug())
}

func (c charactersPartiesDo) WithContext(ctx context.Context) *charactersPartiesDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c charactersPartiesDo) ReadDB() *charactersPartiesDo {
	return c.Clauses(dbresolver.Read)
}

func (c charactersPartiesDo) WriteDB() *charactersPartiesDo {
	return c.Clauses(dbresolver.Write)
}

func (c charactersPartiesDo) Clauses(conds ...clause.Expression) *charactersPartiesDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c charactersPartiesDo) Returning(value interface{}, columns ...string) *charactersPartiesDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c charactersPartiesDo) Not(conds ...gen.Condition) *charactersPartiesDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c charactersPartiesDo) Or(conds ...gen.Condition) *charactersPartiesDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c charactersPartiesDo) Select(conds ...field.Expr) *charactersPartiesDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c charactersPartiesDo) Where(conds ...gen.Condition) *charactersPartiesDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c charactersPartiesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *charactersPartiesDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c charactersPartiesDo) Order(conds ...field.Expr) *charactersPartiesDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c charactersPartiesDo) Distinct(cols ...field.Expr) *charactersPartiesDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c charactersPartiesDo) Omit(cols ...field.Expr) *charactersPartiesDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c charactersPartiesDo) Join(table schema.Tabler, on ...field.Expr) *charactersPartiesDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c charactersPartiesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *charactersPartiesDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c charactersPartiesDo) RightJoin(table schema.Tabler, on ...field.Expr) *charactersPartiesDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c charactersPartiesDo) Group(cols ...field.Expr) *charactersPartiesDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c charactersPartiesDo) Having(conds ...gen.Condition) *charactersPartiesDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c charactersPartiesDo) Limit(limit int) *charactersPartiesDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c charactersPartiesDo) Offset(offset int) *charactersPartiesDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c charactersPartiesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *charactersPartiesDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c charactersPartiesDo) Unscoped() *charactersPartiesDo {
	return c.withDO(c.DO.Unscoped())
}

func (c charactersPartiesDo) Create(values ...*model.CharactersParties) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c charactersPartiesDo) CreateInBatches(values []*model.CharactersParties, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c charactersPartiesDo) Save(values ...*model.CharactersParties) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c charactersPartiesDo) First() (*model.CharactersParties, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CharactersParties), nil
	}
}

func (c charactersPartiesDo) Take() (*model.CharactersParties, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CharactersParties), nil
	}
}

func (c charactersPartiesDo) Last() (*model.CharactersParties, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CharactersParties), nil
	}
}

func (c charactersPartiesDo) Find() ([]*model.CharactersParties, error) {
	result, err := c.DO.Find()
	return result.([]*model.CharactersParties), err
}

func (c charactersPartiesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CharactersParties, err error) {
	buf := make([]*model.CharactersParties, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c charactersPartiesDo) FindInBatches(result *[]*model.CharactersParties, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c charactersPartiesDo) Attrs(attrs ...field.AssignExpr) *charactersPartiesDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c charactersPartiesDo) Assign(attrs ...field.AssignExpr) *charactersPartiesDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c charactersPartiesDo) Joins(fields ...field.RelationField) *charactersPartiesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c charactersPartiesDo) Preload(fields ...field.RelationField) *charactersPartiesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c charactersPartiesDo) FirstOrInit() (*model.CharactersParties, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CharactersParties), nil
	}
}

func (c charactersPartiesDo) FirstOrCreate() (*model.CharactersParties, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CharactersParties), nil
	}
}

func (c charactersPartiesDo) FindByPage(offset int, limit int) (result []*model.CharactersParties, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c charactersPartiesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c charactersPartiesDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c *charactersPartiesDo) withDO(do gen.Dao) *charactersPartiesDo {
	c.DO = *do.(*gen.DO)
	return c
}
