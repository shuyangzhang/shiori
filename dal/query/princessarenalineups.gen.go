// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/shuyangzhang/shiori/dal/model"
)

func newPrincessArenaLineups(db *gorm.DB) princessArenaLineups {
	_princessArenaLineups := princessArenaLineups{}

	_princessArenaLineups.princessArenaLineupsDo.UseDB(db)
	_princessArenaLineups.princessArenaLineupsDo.UseModel(&model.PrincessArenaLineups{})

	tableName := _princessArenaLineups.princessArenaLineupsDo.TableName()
	_princessArenaLineups.ALL = field.NewField(tableName, "*")
	_princessArenaLineups.ID = field.NewInt32(tableName, "id")
	_princessArenaLineups.UserID = field.NewString(tableName, "user_id")
	_princessArenaLineups.PrincessArenaID = field.NewTime(tableName, "princess_arena_id")
	_princessArenaLineups.DefenderID = field.NewInt32(tableName, "defender_id")
	_princessArenaLineups.DefenderName = field.NewString(tableName, "defender_name")
	_princessArenaLineups.FirstLineupID = field.NewInt32(tableName, "first_lineup_id")
	_princessArenaLineups.SecondLineupID = field.NewInt32(tableName, "second_lineup_id")
	_princessArenaLineups.ThirdLineupID = field.NewInt32(tableName, "third_lineup_id")
	_princessArenaLineups.IsOutdated = field.NewBool(tableName, "is_outdated")
	_princessArenaLineups.UpdatedTime = field.NewTime(tableName, "updated_time")
	_princessArenaLineups.IsDeleted = field.NewBool(tableName, "is_deleted")

	_princessArenaLineups.fillFieldMap()

	return _princessArenaLineups
}

type princessArenaLineups struct {
	princessArenaLineupsDo

	ALL             field.Field
	ID              field.Int32
	UserID          field.String
	PrincessArenaID field.Time
	DefenderID      field.Int32
	DefenderName    field.String
	FirstLineupID   field.Int32
	SecondLineupID  field.Int32
	ThirdLineupID   field.Int32
	IsOutdated      field.Bool
	UpdatedTime     field.Time
	IsDeleted       field.Bool

	fieldMap map[string]field.Expr
}

func (p princessArenaLineups) Table(newTableName string) *princessArenaLineups {
	p.princessArenaLineupsDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p princessArenaLineups) As(alias string) *princessArenaLineups {
	p.princessArenaLineupsDo.DO = *(p.princessArenaLineupsDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *princessArenaLineups) updateTableName(table string) *princessArenaLineups {
	p.ALL = field.NewField(table, "*")
	p.ID = field.NewInt32(table, "id")
	p.UserID = field.NewString(table, "user_id")
	p.PrincessArenaID = field.NewTime(table, "princess_arena_id")
	p.DefenderID = field.NewInt32(table, "defender_id")
	p.DefenderName = field.NewString(table, "defender_name")
	p.FirstLineupID = field.NewInt32(table, "first_lineup_id")
	p.SecondLineupID = field.NewInt32(table, "second_lineup_id")
	p.ThirdLineupID = field.NewInt32(table, "third_lineup_id")
	p.IsOutdated = field.NewBool(table, "is_outdated")
	p.UpdatedTime = field.NewTime(table, "updated_time")
	p.IsDeleted = field.NewBool(table, "is_deleted")

	p.fillFieldMap()

	return p
}

func (p *princessArenaLineups) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *princessArenaLineups) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["princess_arena_id"] = p.PrincessArenaID
	p.fieldMap["defender_id"] = p.DefenderID
	p.fieldMap["defender_name"] = p.DefenderName
	p.fieldMap["first_lineup_id"] = p.FirstLineupID
	p.fieldMap["second_lineup_id"] = p.SecondLineupID
	p.fieldMap["third_lineup_id"] = p.ThirdLineupID
	p.fieldMap["is_outdated"] = p.IsOutdated
	p.fieldMap["updated_time"] = p.UpdatedTime
	p.fieldMap["is_deleted"] = p.IsDeleted
}

func (p princessArenaLineups) clone(db *gorm.DB) princessArenaLineups {
	p.princessArenaLineupsDo.ReplaceDB(db)
	return p
}

type princessArenaLineupsDo struct{ gen.DO }

func (p princessArenaLineupsDo) Debug() *princessArenaLineupsDo {
	return p.withDO(p.DO.Debug())
}

func (p princessArenaLineupsDo) WithContext(ctx context.Context) *princessArenaLineupsDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p princessArenaLineupsDo) ReadDB() *princessArenaLineupsDo {
	return p.Clauses(dbresolver.Read)
}

func (p princessArenaLineupsDo) WriteDB() *princessArenaLineupsDo {
	return p.Clauses(dbresolver.Write)
}

func (p princessArenaLineupsDo) Clauses(conds ...clause.Expression) *princessArenaLineupsDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p princessArenaLineupsDo) Returning(value interface{}, columns ...string) *princessArenaLineupsDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p princessArenaLineupsDo) Not(conds ...gen.Condition) *princessArenaLineupsDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p princessArenaLineupsDo) Or(conds ...gen.Condition) *princessArenaLineupsDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p princessArenaLineupsDo) Select(conds ...field.Expr) *princessArenaLineupsDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p princessArenaLineupsDo) Where(conds ...gen.Condition) *princessArenaLineupsDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p princessArenaLineupsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *princessArenaLineupsDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p princessArenaLineupsDo) Order(conds ...field.Expr) *princessArenaLineupsDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p princessArenaLineupsDo) Distinct(cols ...field.Expr) *princessArenaLineupsDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p princessArenaLineupsDo) Omit(cols ...field.Expr) *princessArenaLineupsDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p princessArenaLineupsDo) Join(table schema.Tabler, on ...field.Expr) *princessArenaLineupsDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p princessArenaLineupsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *princessArenaLineupsDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p princessArenaLineupsDo) RightJoin(table schema.Tabler, on ...field.Expr) *princessArenaLineupsDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p princessArenaLineupsDo) Group(cols ...field.Expr) *princessArenaLineupsDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p princessArenaLineupsDo) Having(conds ...gen.Condition) *princessArenaLineupsDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p princessArenaLineupsDo) Limit(limit int) *princessArenaLineupsDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p princessArenaLineupsDo) Offset(offset int) *princessArenaLineupsDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p princessArenaLineupsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *princessArenaLineupsDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p princessArenaLineupsDo) Unscoped() *princessArenaLineupsDo {
	return p.withDO(p.DO.Unscoped())
}

func (p princessArenaLineupsDo) Create(values ...*model.PrincessArenaLineups) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p princessArenaLineupsDo) CreateInBatches(values []*model.PrincessArenaLineups, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p princessArenaLineupsDo) Save(values ...*model.PrincessArenaLineups) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p princessArenaLineupsDo) First() (*model.PrincessArenaLineups, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrincessArenaLineups), nil
	}
}

func (p princessArenaLineupsDo) Take() (*model.PrincessArenaLineups, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrincessArenaLineups), nil
	}
}

func (p princessArenaLineupsDo) Last() (*model.PrincessArenaLineups, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrincessArenaLineups), nil
	}
}

func (p princessArenaLineupsDo) Find() ([]*model.PrincessArenaLineups, error) {
	result, err := p.DO.Find()
	return result.([]*model.PrincessArenaLineups), err
}

func (p princessArenaLineupsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PrincessArenaLineups, err error) {
	buf := make([]*model.PrincessArenaLineups, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p princessArenaLineupsDo) FindInBatches(result *[]*model.PrincessArenaLineups, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p princessArenaLineupsDo) Attrs(attrs ...field.AssignExpr) *princessArenaLineupsDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p princessArenaLineupsDo) Assign(attrs ...field.AssignExpr) *princessArenaLineupsDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p princessArenaLineupsDo) Joins(fields ...field.RelationField) *princessArenaLineupsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p princessArenaLineupsDo) Preload(fields ...field.RelationField) *princessArenaLineupsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p princessArenaLineupsDo) FirstOrInit() (*model.PrincessArenaLineups, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrincessArenaLineups), nil
	}
}

func (p princessArenaLineupsDo) FirstOrCreate() (*model.PrincessArenaLineups, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrincessArenaLineups), nil
	}
}

func (p princessArenaLineupsDo) FindByPage(offset int, limit int) (result []*model.PrincessArenaLineups, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p princessArenaLineupsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p princessArenaLineupsDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p *princessArenaLineupsDo) withDO(do gen.Dao) *princessArenaLineupsDo {
	p.DO = *do.(*gen.DO)
	return p
}
